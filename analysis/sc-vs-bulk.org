#+TITLE: Single cell/bulk RNA-Seq concordance
#+SETUPFILE: setup.org

* Introduction

  Here, we investigate the correlation between single cell RNA-Seq and bulk
  RNA-Seq on samples from the same cell type in the same individuals. Our goal
  is to qualitatively assess our ability to call QTLs from scRNA-Seq.

* Setup                                                            :noexport:

  #+BEGIN_SRC emacs-lisp
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(memory="16G", venv="scqtl")

  #+RESULTS:
  : Submitted batch job 44375305

  #+BEGIN_SRC ipython
    import colorcet
    import gzip
    import io
    import matplotlib.pyplot as plt
    import numpy as np
    import os
    import pandas as pd
    import re
    import requests
    import scipy.stats as sst
    import sklearn.linear_model as sklm
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[1]:
  :END:

* Read the data

  Read and QC the single cell counts.

  #+BEGIN_SRC ipython
    umi = pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/scqtl-counts.txt.gz', index_col=0)
    annotations = pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/scqtl-annotation.txt')
    keep_samples = pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/quality-single-cells.txt', index_col=0, header=None)
    keep_genes = pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/genes-pass-filter.txt', index_col=0, header=None)
    umi = umi.loc[keep_genes.values.ravel(),keep_samples.values.ravel()]
    annotations = annotations.loc[keep_samples.values.ravel()]
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[2]:
  :END:

  Our preliminary investigation into concordance between single cell log CPM
  and bulk log RPKM did not give good results. Therefore, we [[file:kallisto.org][re-processed the
  iPSC bulk RNA-Seq]] using ~kallisto~. Read the TPM matrix.

  #+BEGIN_SRC ipython
    bulk_log_tpm = pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/kallisto/bulk-ipsc-tpm.txt.gz', header=None, sep=' ')
    bulk_log_tpm = np.log(bulk_log_tpm.pivot(columns=0, index=1, values=2) + 1) / np.log(2)
    bulk_log_tpm.index = [x.split('.')[0] for x in bulk_log_tpm.index]
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[3]:
  :END:

  #+NAME: concordance-def
  #+BEGIN_SRC ipython
    def plot_concordance(x, y, title, filename, xlabel=None, ylabel=None, **kwargs):
      """Plot hexbin of concordance"""
      merged = x.merge(y, left_index=True, right_index=True)
      merged.columns = ['x', 'y']
      lim = [merged.min().min(), merged.max().max()]
      plt.clf()
      if 'gridsize' not in kwargs:
        kwargs['gridsize'] = 40
      plt.hexbin(merged['x'], merged['y'], cmap=colorcet.cm['blues'], **kwargs)
      cb = plt.colorbar()
      cb.set_label('Number of genes')
      plt.plot(lim, lim, color='red')
      ax = plt.gca()
      ax.set_xlim([merged['x'].min(), merged['x'].max()])
      ax.set_ylim([merged['y'].min(), merged['y'].max()])
      plt.title(title)
      if xlabel is None:
        xlabel = 'scRNA-Seq $\log_2(\mathrm{CPM} + 1) $'
      if ylabel is None:
        ylabel = 'Bulk RNA-Seq $\log_2(\mathrm{TPM} + 1)$'
      plt.xlabel(xlabel)
      plt.ylabel(ylabel)
      plt.savefig(filename)

    def cpm(counts, log2=False):
      cpm = counts / counts.sum(axis=0) * 1e6
      if log2:
        cpm = np.log(cpm + 1) / np.log(2)
      return cpm
  #+END_SRC

  #+RESULTS: concordance-def
  :RESULTS:
  # Out[4]:
  :END:

  #+RESULTS:
  :RESULTS:
  :END:

* Plot bulk vs. pooled single cells

  #+BEGIN_SRC ipython
    def plot_concordance_by_individual(umi, annotations, bulk, output_dir):
      bulk, pooled_cpm = bulk.align(
        cpm(umi.groupby(by=annotations['chip_id'].values, axis=1).agg(np.sum), log2=True),
        axis=1, join='inner')
      for k in bulk:
        plot_concordance(
          x=pooled_cpm[k].to_frame(),
          y=bulk[k].to_frame(),
          title=k,
          filename='{}/{}.svg'.format(output_dir, k))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[5]:
  :END:

  #+BEGIN_SRC ipython :exports code :results none
    plot_concordance_by_individual(
      umi,
      annotations,
      bulk_log_tpm,
      '/project2/mstephens/aksarkar/projects/singlecell-qtl/analysis/figure/sc-vs-bulk.org/normed')
  #+END_SRC

  Plot several examples.

  #+BEGIN_SRC ipython :results raw output
    np.random.seed(0)
    for k in np.random.choice(annotations['chip_id'].unique(), 4):
      print('file:figure/sc-vs-bulk.org/normed/{}.svg'.format(k))
  #+END_SRC

  #+RESULTS:
  file:figure/sc-vs-bulk.org/normed/NA19130.svg
  file:figure/sc-vs-bulk.org/normed/NA19102.svg
  file:figure/sc-vs-bulk.org/normed/NA19143.svg
  file:figure/sc-vs-bulk.org/normed/NA19098.svg

  Regress log CPM on log TPM per individual.

  #+BEGIN_SRC ipython
    log_cpm = cpm(umi.groupby(by=annotations['chip_id'].values, axis=1).agg(np.sum), log2=True)

    models = []
    for k in log_cpm:
      if k in bulk_log_tpm:
        y, x = log_cpm[k].align(bulk_log_tpm[k], join='inner')
        m = sklm.LinearRegression(fit_intercept=True).fit(x.values.reshape(-1, 1), y)
        models.append({'ind': k, 'coef_': m.coef_[0], 'intercept_': m.intercept_, 'score': m.score(x.values.reshape(-1, 1), y)})
    models = pd.DataFrame.from_dict(models).set_index('ind')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[20]:
  :END:

  #+BEGIN_SRC ipython
    models.sort_values('score', ascending=False)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[21]:
  #+BEGIN_EXAMPLE
    coef_  intercept_     score
    ind
    NA19209  0.759377    1.660926  0.709362
    NA18870  0.750696    1.732782  0.703104
    NA19101  0.759685    1.690175  0.697954
    NA18511  0.740117    1.809700  0.693680
    NA18912  0.718535    2.001607  0.692959
    NA18520  0.760444    1.613778  0.685874
    NA18502  0.738130    1.711769  0.682607
    NA19116  0.742643    1.755796  0.681918
    NA19127  0.741644    1.769711  0.680303
    NA19225  0.706966    2.106424  0.679880
    NA18856  0.764916    1.597887  0.679598
    NA18862  0.722867    1.891478  0.679059
    NA18858  0.754711    1.666457  0.678761
    NA18505  0.714221    1.917385  0.677579
    NA19190  0.740495    1.720444  0.677577
    NA19128  0.743995    1.737283  0.674081
    NA18859  0.728045    1.872289  0.673909
    NA19210  0.733700    1.742506  0.673691
    NA18489  0.728046    1.895054  0.672914
    NA19204  0.743995    1.750568  0.672341
    NA19160  0.743820    1.685838  0.671657
    NA18852  0.754111    1.635548  0.671283
    NA18853  0.707881    1.977697  0.670091
    NA19207  0.752425    1.584909  0.670047
    NA18501  0.714753    1.969962  0.664866
    NA19102  0.750077    1.671346  0.664716
    NA19257  0.695525    2.084460  0.664515
    NA19140  0.711993    1.965617  0.664095
    NA19143  0.740653    1.705506  0.661908
    NA19153  0.738036    1.698136  0.661239
    NA19152  0.723241    1.868916  0.659311
    NA19099  0.748797    1.693588  0.658244
    NA19108  0.720094    1.902579  0.652776
    NA18913  0.742618    1.725264  0.652254
    NA19093  0.752946    1.654357  0.651548
    NA18517  0.700715    2.053029  0.648788
    NA18519  0.747064    1.626929  0.648665
    NA19114  0.699838    2.076215  0.644568
    NA19206  0.728429    1.821610  0.643768
    NA19130  0.729332    1.796103  0.640484
    NA19193  0.731584    1.774047  0.640351
    NA18855  0.735860    1.819777  0.640328
    NA19098  0.725242    1.901097  0.639892
    NA18907  0.743605    1.680004  0.637896
    NA18522  0.715081    1.923653  0.632872
    NA18508  0.687100    2.124206  0.631827
    NA19144  0.689462    2.124030  0.629938
    NA18507  0.665595    2.426414  0.629691
    NA19159  0.746806    1.680142  0.623998
    NA18498  0.728503    1.748663  0.618822
  #+END_EXAMPLE
  :END:

* Plot bulk vs. pooled subsets

  Plot concordance between bulk vs pools of single cells, focusing on genes
  which have log-transformed expression at least 1 in both assays.

  #+BEGIN_SRC ipython
    def plot_concordance_by_num_cells(individual, umi, annotations, bulk_tpm, output_dir):
      bulk_tpm = bulk_tpm[individual].to_frame()
      umi = umi.loc[:,(annotations['chip_id'] == individual).values]
      for num_cells in [1, 10, 50, 100, 200]:
        pooled_cpm = cpm(umi.sample(n=num_cells, axis=1).sum(axis=1).to_frame(), log2=True)
        plot_concordance(
          x=pooled_cpm,
          y=bulk_tpm,
          title='{}, {} cell{}'.format(individual, num_cells, 's' if num_cells > 1 else ''),
          filename='{}/{}-{}.svg'.format(output_dir, individual, num_cells),
          gridsize=20)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[7]:
  :END:

  #+BEGIN_SRC ipython :results none
    plot_concordance_by_num_cells(
      'NA18507',
      umi,
      annotations,
      bulk_log_tpm,
      '/project2/mstephens/aksarkar/projects/singlecell-qtl/analysis/figure/sc-vs-bulk.org/vs-cells/'
    )
  #+END_SRC

  file:figure/sc-vs-bulk.org/vs-cells/NA18507-1.svg
  file:figure/sc-vs-bulk.org/vs-cells/NA18507-10.svg
  file:figure/sc-vs-bulk.org/vs-cells/NA18507-50.svg
  file:figure/sc-vs-bulk.org/vs-cells/NA18507-100.svg
  file:figure/sc-vs-bulk.org/vs-cells/NA18507-200.svg

* Plot pooled subsets vs. pooled subsets

  Ensure that pools don't overlap by randomly sampling double the cells and
  partitioning into two halves.

  #+BEGIN_SRC ipython
    def plot_concordance_pooled_subsets(individual, umi, annotations, output_dir):
      umi = umi.loc[:,(annotations['chip_id'] == individual).values]
      for num_cells in [1, 10, 50, 100]:
        sample = umi.sample(n=2 * num_cells, axis=1)
        pool1 = cpm(sample.iloc[:,:num_cells].sum(axis=1).to_frame(), log2=True)
        pool2 = cpm(sample.iloc[:,num_cells:].sum(axis=1).to_frame(), log2=True)
        plot_concordance(
          x=pool1,
          y=pool2,
          title='{}, {} cell{}'.format(individual, num_cells, 's' if num_cells > 1 else ''),
          filename='{}/{}-{}.svg'.format(output_dir, individual, num_cells),
          ylabel='scRNA-Seq $\log_2(\mathrm{CPM} + 1)$',
          gridsize=15)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[10]:
  :END:

  #+BEGIN_SRC ipython :results none
    plot_concordance_pooled_subsets(
      'NA18507',
      umi,
      annotations,
      '/project2/mstephens/aksarkar/projects/singlecell-qtl/analysis/figure/sc-vs-bulk.org/subsets/'
    )
  #+END_SRC

  file:figure/sc-vs-bulk.org/subsets/NA18507-1.svg
  file:figure/sc-vs-bulk.org/subsets/NA18507-10.svg
  file:figure/sc-vs-bulk.org/subsets/NA18507-50.svg
  file:figure/sc-vs-bulk.org/subsets/NA18507-100.svg
