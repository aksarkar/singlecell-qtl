#+TITLE: QTL mapping pipeline
#+SETUPFILE: setup.org

* Introduction

  We previously [[file:zinb.org][estimated means and dispersions per individual, per gene]]. In
  our modular approach, we now fit log linear models for each:

  \[ \ln \mu_{ik} = X \beta_\mu + \epsilon_\mu \]

  \[ \ln \phi_{ik} = X \beta_\phi + \epsilon_\phi \]

  where \(\mu_{ik}, \phi_{ik}\) are the mean and dispersion for individual
  \(i\), gene \(k\), \(X\) is the genotype matrix (\(n \times 1)\), and
  \(\beta_\mu, \beta_\phi\) are the effect sizes (scalar).

  Here, we present the following analyses:

  1. [[*Replicate bulk eQTLs in the single cell data][We replicate bulk eQTLs]] in the scRNA-Seq data
  2. [[*Test validity of approximate permutation test][We show that approximating a permutation test]] is not appropriate
  3. [[*Call mean-QTLs in the single cell data][We call mean QTLs]] in the scRNA-Seq data
  4. [[*Dispersion-QTL calling][We call robustness QTLs]] in the scRNA-Seq data

* Setup                                                            :noexport:

  #+BEGIN_SRC emacs-lisp
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(memory="4G", venv="scqtl") :dir /scratch/midway2/aksarkar/singlecell

  #+RESULTS:
  : Submitted batch job 44350818

  #+BEGIN_SRC ipython
    %matplotlib inline

    import matplotlib.pyplot as plt
    import numpy as np
    import os.path
    import pandas as pd
    import rpy2.robjects.packages
    import rpy2.robjects.pandas2ri
    import rpy2.robjects.numpy2ri
    import scipy.stats as st
    import sklearn.decomposition as skd
    import sqlite3
    import tabix

    pandas2ri = rpy2.robjects.pandas2ri
    numpy2ri = rpy2.robjects.numpy2ri.numpy2ri
    edger = rpy2.robjects.packages.importr('edgeR')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[1]:
  :END:

* Implementation

  #+NAME: r-wrappers
  #+BEGIN_SRC ipython
    def cpm(x):
      return pd.DataFrame(pandas2ri.ri2py(edger.cpm(numpy2ri(x.values), log=True)),
                          columns=x.columns,
                          index=x.index)

    def qqnorm(x):
      """Wrap around R qqnorm"""
      return np.asarray(rpy2.robjects.r['qqnorm'](numpy2ri(x))[0])

    def bh(x):
      """Wrap around p.adjust(..., method='fdr')"""
      return np.asarray(rpy2.robjects.r['p.adjust'](numpy2ri(x), method='fdr'))
  #+END_SRC

  #+NAME: write-pheno-def
  #+BEGIN_SRC ipython
    def qtltools_format(row):
      row['#Chr'] = 'chr{}'.format(row['chr'][2:])
      row['gid'] = row.name
      row['pid'] = row.name
      # Important: qtltools expects TSS start/end
      if row['strand'] == '+':
        row['end'] = row['start']
      else:
        row['start'] = row['end']
      return row.loc[['#Chr', 'start', 'end', 'pid', 'gid', 'strand']]

    def write_pheno_file(pheno, gene_info, output_file, holdout=True, **kwargs):
      if holdout:
        genes = gene_info.loc[gene_info.apply(lambda x: bool(int(x['chr'][2:]) % 2), axis=1)]
      else:
        genes = gene_info
      (genes
       .apply(qtltools_format, **kwargs, axis=1)
       .merge(pheno, left_index=True, right_index=True)
       .to_csv(output_file,
               sep='\t',
               header=True,
               index=False,
               index_label=False))
  #+END_SRC

  #+NAME: tabix
  #+BEGIN_SRC sh :var input="test.bed" :var partition="broadwl" :dir /scratch/midway2/aksarkar/singlecell :eval never-export
    export input=$input
    sbatch --partition=$partition
    #!/bin/bash
    module load bedtools
    bedtools sort -header -i $input | bgzip >$input.gz
    tabix -f -p bed $input.gz
  #+END_SRC

  #+NAME: qtltools
  #+BEGIN_SRC sh :var pheno="test" :var geno="geuvadis-chr1.vcf.gz" :var partition="broadwl" :var op="--permute 100000" :dir /scratch/midway2/aksarkar/singlecell :eval never-export 
    export pheno=$pheno
    export geno=$geno
    export op=$op
    sbatch --partition=$partition -a 1-100 -J $pheno-qtl
    #!/bin/bash
    source activate scqtl
    qtltools cis --vcf $geno --bed $pheno.bed.gz $op --chunk $SLURM_ARRAY_TASK_ID 100 --out $pheno-qtl.$SLURM_ARRAY_TASK_ID.txt --seed 0
  #+END_SRC

  #+NAME: read-qtltools-def
  #+BEGIN_SRC ipython
    def _read_helper(pheno, columns):
      file_names = ['{}-qtl.{}.txt'.format(pheno, i) for i in range(1, 101)]
      return (pd.concat([pd.read_table(f, header=None, sep=' ')
                         for f in file_names if os.path.exists(f) and
                         os.path.getsize(f) > 0])
              .rename(columns={i: x for i, x in enumerate(columns)})
              .dropna()
              .sort_values('p_beta'))


    def read_fastqtl_output(pheno):
      columns = ['gene', 'num_snps', 'a', 'b', 'dummy', 'id',
                 'distance', 'p', 'beta', 'p_empirical', 'p_beta']
      res = _read_helper(pheno, columns)
      # Drop the gene version number
      res['gene'] = res['gene'].apply(lambda x: x.split('.')[0])
      res['chr'] = res['id'].apply(lambda x: x.split('.')[1])
      res['pos'] = res['id'].apply(lambda x: x.split('.')[2])
      res['id'] = res['id'].apply(lambda x: x.split('.')[0])
      return res

    def read_qtltools_output(pheno):
      columns = ['gene', 'chr', 'start', 'end', 'strand', 'num_vars',
                 'distance', 'id', 'var_chr', 'var_start', 'var_end', 'df',
                 'dummy', 'a', 'b', 'p_nominal', 'beta', 'p_empirical', 'p_beta']
      return _read_helper(pheno, columns)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[79]:
  :END:

  #+NAME: plot-approx-perm-def
  #+BEGIN_SRC ipython
    def plot_approx_permutation(df):
      plt.clf()
      plt.gcf().set_size_inches(6, 6)
      plt.scatter(df['p_empirical'], df['p_beta'], s=1, c='k')
      plt.plot([0, 1], [0, 1], c='r', ls='--')
      plt.xlabel('Empirical p-value')
      plt.ylabel('Approximate p-value')
  #+END_SRC

  #+NAME: replication-tests-def
  #+BEGIN_SRC ipython
    def parse_vcf_dosage(record):
      geno = [float(g) for g in record[9:]]
      return pd.Series(geno)

    def extract_qtl_gene_pair(qtl_gene_df, pheno_df, dosages):
      """Return aligned genotype and phenotype matrix for each QTL-gene pair in qtl_gene_df"""
      common_phenos, common_qtls = pheno_df.align(qtl_gene_df.set_index('gene'), join='inner', axis=0)
      # Important: individual IDs do not have the NA prefix in the VCF
      header = ['NA{}'.format(x) for x in pd.read_table(dosages, nrows=1, header=0).columns[9:]]
      genotypes = tabix.open(dosages)
      X, Y = (common_qtls
              .apply(lambda x: parse_vcf_dosage(next(genotypes.query(x['chr'], int(x['pos']) - 1, int(x['pos'])))), axis=1)
              .rename(columns={i: ind for i, ind in enumerate(header)})
              .align(common_phenos, join='inner', axis=None))
      return X, Y

    def replication_tests(X, Y):
      """Return a DataFrame containing replication p-values

      X - centered dosage matrix (num_genes, num_individuals)
      Y - phenotype matrix (num_genes, num_individuals)

      """
      result = []
      _sf = st.chi2(1).sf
      for (_, x), (name, y) in zip(X.iterrows(), Y.iterrows()):
        if np.isclose(x.std(), 0):
          print('Skipping {}'.format(name))
          continue
        x = x.values.copy().reshape(-1, 1)
        y = y.values.copy().ravel()
        x -= x.mean()
        y -= y.mean()
        beta, rss, *_ = np.linalg.lstsq(x, y, rcond=-1)
        sigma2 = rss / y.shape[0]
        se = sigma2 / x.T.dot(x).ravel()
        pval = _sf(np.square(beta / se))
        result.append({'gene': name, 'beta': beta[0], 'p': pval.ravel()[0]})
      return pd.DataFrame.from_dict(result)
  #+END_SRC

  #+RESULTS: replication-tests-def
  :RESULTS:
  # Out[140]:
  :END:

* Test validity of approximate permutation test

  ~qtltools~ tries to calibrate false discovery rates using the following
  procedure:

  1. For each gene, permute the genotype data to estimate the null distribution
     of the p-values
  2. Fit a beta distribution to the permuted p-values via ML
  3. Compute the lower tail probability of the observed p-value, assuming it
     was generated from the fitted beta distribution
  4. Apply FDR correction on the set of lower tail probabilities (across all
     genes)

  Test whether the beta approximation is appropriate for our sample size by
  subsetting GEUVADIS. Take all genes on chromosome 1.

  #+BEGIN_SRC ipython
    geuvadis = []
    for chunk in pd.read_table('/project/compbio/geuvadis/analysis_results/GD462.GeneQuantRPKM.50FN.samplename.resk10.txt.gz', chunksize=100):
      geuvadis.append(chunk.query('Chr == "1"'))
    geuvadis = pd.concat(geuvadis)
    geuvadis = geuvadis.set_index(geuvadis['Gene_Symbol'].apply(lambda x: x.split('.')[0]))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[20]:
  :END:

  First, replicate the result in [[https://www.nature.com/articles/ncomms15452][Delaneau et al 2017]] by using all 462
  individuals from GEUVADIS.

  #+BEGIN_SRC ipython
    pd.Series(geuvadis.columns).sort_values().to_csv('/scratch/midway2/aksarkar/singlecell/geuvadis-subset.txt', header=None, index=None)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[113]:
  :END:

  Write out the phenotype file for ~qtltools~. Important: GEUVADIS VCFs code
  chromosome without ~chr~.

  #+BEGIN_SRC ipython :noweb no-export
    <<write-pheno-def>>
    write_pheno_file(geuvadis, gene_info, '/scratch/midway2/aksarkar/singlecell/test.bed')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[110]:
  :END:

  Index the phenotype file. Important: ~#~ sorts before ~c~, but after ~1~.

  #+CALL: tabix()

  #+RESULTS: tabix
  : Submitted batch job 44138052

  Perform SNP QC in ~plink~.

  #+NAME: geuvadis-qc
  #+BEGIN_SRC sh :dir /scratch/midway2/aksarkar/singlecell/
    sbatch --partition=broadwl --mem=2G
    #!/bin/bash
    plink --memory 2000 --geno 0.01 --maf 0.05 --keep-fam /scratch/midway2/aksarkar/singlecell/geuvadis-subset.txt --vcf /project/compbio/geuvadis/genotypes/GEUVADIS.chr1.PH1PH2_465.IMPFRQFILT_BIALLELIC_PH.annotv2.genotypes.vcf.gz --recode vcf-iid --out geuvadis-chr1
    bgzip -f geuvadis-chr1.vcf
    tabix -f -p vcf geuvadis-chr1.vcf.gz
  #+END_SRC

  #+RESULTS:
  : Submitted batch job 44138103

  Run ~qtltools~.

  #+CALL: qtltools()

  #+RESULTS: qtltools
  : Submitted batch job 44138141

  Read the results.

  #+BEGIN_SRC ipython :noweb no-export
    <<read-qtltools-def>>
    geuvadis_qtls = read_qtltools_output('test')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[11]:
  :END:

  Check the beta approximation to the permutation p-values.

  #+BEGIN_SRC ipython :noweb no-export :ipyfile figure/qtl-mapping.org/geuvadis-beta-approx.png
    <<plot-approx-perm-def>>
    plot_approx_permutation(geuvadis_qtls)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[14]:
  [[file:figure/qtl-mapping.org/geuvadis-beta-approx.png]]
  :END:

  Repeat the analysis after subsetting to 54 individuals.

  #+BEGIN_SRC ipython
    np.random.seed(0)
    subset = np.random.choice([x for x in geuvadis.columns], size=54, replace=False)
    pd.Series(subset).sort_values().to_csv('/scratch/midway2/aksarkar/singlecell/geuvadis-subset.txt', header=None, index=None)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[17]:
  :END:

  #+BEGIN_SRC ipython :noweb no-export
    <<write-pheno-def>>
    write_pheno_file(geuvadis[subset], gene_info, '/scratch/midway2/aksarkar/singlecell/test.bed')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[28]:
  :END:

  #+CALL: tabix()

  #+RESULTS:
  : Submitted batch job 44139679

  #+CALL: geuvadis-qc()

  #+RESULTS:
  : Submitted batch job 44139583

  #+CALL: qtltools()

  #+RESULTS:
  : Submitted batch job 44139682

  #+BEGIN_SRC ipython :noweb no-export :ipyfile figure/qtl-mapping.org/geuvadis-54-beta-approx.png
    <<read-qtltools-def>>
    <<plot-approx-perm-def>>
    geuvadis_54_qtls = read_qtltools_output('test')
    plot_approx_permutation(geuvadis_54_qtls)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[30]:
  [[file:figure/qtl-mapping.org/geuvadis-54-beta-approx.png]]
  :END:

* Reproduce bulk eQTL calls

  The iPSC bulk eQTLs were called in [[https://genome.cshlp.org/content/28/1/122.long][Banovich et al 2018]].

  #+BEGIN_EXAMPLE
    eQTLs in iPSCs and LCLs: We transformed expression levels to a standard normal
    within each individual. We next accounted for unknown confounders by removing
    principal components from the LCL (15 PCs) and iPSC (10 PCs) data. Genotypes
    were obtained using impute2 as described previously (Li et al. 2016). We only
    considered variants within 50 kb of genes. To identify association between
    genotype and gene expression, we used FastQTL (Ongen et al. 2016). After the
    initial regression, a variable number of permutations were performed to obtain
    a gene-wise adjusted P-value (Ongen et al. 2016). To identify significant
    eQTLs, we used Storey's q-value (Storey and Tibshirani 2003) on the adjusted
    P-values. Genes with a q-value less than 0.1 are considered significant.
  #+END_EXAMPLE

  *Important notes:*

  1. The text doesn't state how expression level was quantified (it was the
     ratio of mapped reads to total reads after correction by
     ~WASP~).

     ~WASP~ ([[https://www.nature.com/articles/nmeth.3582][de Geijin et al 2015]]) fits quartic polynomials \(f, g\) which
     predict the total read count per region \(T^*_{ij}\) from the observed
     read count \(x_{ij}\) and GC content \(w_j\) by maximizing the likelihood
     of the observed read counts:

     \[ x_{ij} \sim \mathrm{Pois}(T^*_{ij}) \]

     \[ T^*_{ij} = \exp\left(f\left(\sum_i x_{ij}\right)\right) g(w_j) \]

     [[*Recall bulk eQTLs][Using log CPM]] (under the assumption that we never compare genes to each
     other) yields 1279 eQTLs (89%).

  2. ~fastqtl~ expects gene start/end, and only takes /cis/-SNPs around the
     start ignoring strand. The code uses GENCODE v19 exons to define the
     start/end.

     ~qtltools~ expects TSS and strand, but doesn't use strand information in
     /cis/-eQTL mapping. Using the start coordinate of the provided expression
     matrix as TSS yields 1265 eQTLs (87%).

  3. The methods section of [[https://www.nature.com/articles/nature10808][Degner et al 2012]] states data is standardized
     across individuals, and quantile normalized within individuals. The
     equation contradicts the text, but the code follows the text.

  4. The code analyzes 100kb windows, contradicting the text.

  5. Not every gene in the input appears in the output, and changing the number
     of chunks changes the number of genes lost.

  6. QTL-gene pairs passed the Benjamini-Hochberg procedure, not Storey's
     procedure.

  #+BEGIN_SRC sh :dir /scratch/midway2/aksarkar/singlecell/reproduce-yang
    sbatch --partition=broadwl -a 1-25
    #!/bin/bash
    source activate scqtl
    fastqtl -V YRI_SNPs_2_IPSC.txt.gen.gz -B fastqtl_qqnorm_RNAseq_run.fixed.txt.gz -C fasteqtl_PC_RNAseq_run.fixed.txt -O bulk-qtl.$SLURM_ARRAY_TASK_ID.txt --exclude-samples file_IPSC.excl --window 1e5 --permute 1000 10000 --chunk $SLURM_ARRAY_TASK_ID 25 --seed 1475098497
  #+END_SRC

  #+RESULTS:
  : Submitted batch job 44327333

  Read ~fastqtl~ output.

  #+BEGIN_SRC ipython :noweb no-export
    <<read-qtltools-def>>
    bulk_qtls = read_fastqtl_output('reproduce-yang/bulk')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[35]:
  :END:

  Compare ~qtltools~ to ~fastqtl~. The input files need to be modified.

  #+BEGIN_SRC sh :dir /scratch/midway2/aksarkar/singlecell/reproduce-yang/
    sbatch --partition=broadwl
    #!/bin/bash
    zcat fastqtl_qqnorm_RNAseq_run.fixed.txt.gz | awk -vOFS='\t' 'NR == 1 {$4 = "pid gid strand"; for (i = 5; i <= NF; i++) {$i = "NA"$i} print} NR > 1 {$4 = $4" "$4" +"; $3 = $2; print}' | bgzip >test.bed.gz
    tabix -p bed -f test.bed.gz
    awk 'NR == 1 {for (i = 2; i <= NF; i++) {$i = "NA"$i}} {print}' fasteqtl_PC_RNAseq_run.fixed.txt >covars.txt
  #+END_SRC

  #+RESULTS:
  : Submitted batch job 44332798

  Run ~qtltools~.

  #+CALL: qtltools(pheno="test", geno="/scratch/midway2/aksarkar/singlecell/reproduce-yang/yri-dosages.vcf.gz", op="--cov covars.txt --window 100000 --permute 10000") :dir /scratch/midway2/aksarkar/singlecell/reproduce-yang/

  #+RESULTS:
  : Submitted batch job 44332903

  #+BEGIN_SRC ipython :noweb no-export
    <<read-qtltools-def>>
    bulk_qtls = read_qtltools_output('reproduce-yang/test')  
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[2]:
  :END:

  Take QTLs with \(\mathrm{FDR} < 0.1\).

  #+BEGIN_SRC ipython
    bulk_qtls['fdr_pass'] = bh(bulk_qtls['p_beta']) < 0.1
    bulk_qtls['fdr_pass'].sum()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[139]:
  : 1441
  :END:

  #+BEGIN_SRC ipython
    bulk_qtls.to_csv('/scratch/midway2/aksarkar/singlecell/reproduce-yang/bulk-qtls.txt.gz', compression='gzip', sep='\t', index=None)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[83]:
  :END:

  Write the expression data to the database.

  #+BEGIN_SRC ipython
    with sqlite3.connect('/project2/mstephens/aksarkar/projects/singlecell-qtl/browser/browser.db') as conn:
      conn.execute('drop table if exists bulk;')
      for chunk in pd.read_table('/scratch/midway2/aksarkar/singlecell/reproduce-yang/fastqtl_qqnorm_RNAseq_run.fixed.txt.gz', header=0, chunksize=1000):
        chunk['gene'] = chunk['ID'].apply(lambda x: x.split('.')[0])
        del chunk['#Chr'], chunk['start'], chunk['end'], chunk['ID']
        chunk = chunk.rename(columns=lambda x: 'NA{}'.format(x) if x != 'gene' else x)
        chunk.melt(id_vars='gene', var_name='ind').to_sql('bulk', con=conn, index=False, if_exists='append')
      conn.execute('create index ix_bulk on bulk(gene, ind);')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[168]:
  :END:

* Recall bulk eQTLs

  Read the counts matrix.

  #+BEGIN_SRC ipython
    bulk_counts = (pd.read_table('/project2/gilad/singlecell-qtl/bulk/counts_RNAseq_iPSC.txt', sep=' ', index_col=0)
                   .rename(columns=lambda x: 'NA{}'.format(x))
                   .rename(index=lambda x: x.split('.')[0]))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[48]:
  :END:

  Throw out individuals.

  #+BEGIN_SRC ipython
    with open('/scratch/midway2/aksarkar/singlecell/reproduce-yang/file_IPSC.excl') as f:
      for line in f:
        k = 'NA{}'.format(line.strip())
        if k in bulk_counts:
          del bulk_counts[k]
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[112]:
  :END:

  Normalize the counts matrix by computing log CPM. Normalizing by length is
  unnecessary because we only ever compare counts for the same gene across
  individuals.

  #+BEGIN_SRC ipython :noweb no-export
    <<r-wrappers>>
    bulk_log_cpm = (cpm(bulk_counts)
                    .transform(lambda x: (x - x.mean()) / x.std(), axis=1)
                    .apply(qqnorm, axis=0))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[114]:
  :END:

  Compute expression PCs.

  #+BEGIN_SRC ipython
    covars = pd.DataFrame(skd.PCA(n_components=10).fit(bulk_log_cpm).components_, columns=bulk_log_cpm.columns)
    covars.index.name = 'id'
    covars.to_csv('/scratch/midway2/aksarkar/singlecell/recall-bulk/covars.txt', sep='\t')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[128]:
  :END:

  Get the TSS information. Use the annotation data (ENSEMBL 75) in this
  repository to be consistent with the single cell data.

  #+NAME: get-gene-info
  #+BEGIN_SRC ipython
    gene_info = (pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/scqtl-genes.txt.gz')
                 .set_index('gene')
                 .query('source == "H. sapiens"')
                 .query('chr != "hsX"')
                 .query('chr != "hsY"')
                 .query('chr != "hsMT"'))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[40]:
  :END:

  Write the phenotype matrix in ~qtltools~ format. *Important: this loses 1716
  genes (are they pseudogenes?)*

  #+BEGIN_SRC ipython :noweb no-export
    <<write-pheno-def>>
    write_pheno_file(
      bulk_log_cpm,
      gene_info,
      holdout=False,
      output_file='/scratch/midway2/aksarkar/singlecell/recall-bulk/bulk.bed')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[115]:
  :END:

  Index the phenotype file.

  #+CALL: tabix(input="bulk.bed") :dir /scratch/midway2/aksarkar/singlecell/recall-bulk

  #+RESULTS:
  : Submitted batch job 44346471

  Ensure the dosage file follows the VCF standard. Add the prefix ~NA~ to sample IDs.

  #+BEGIN_SRC sh :dir /scratch/midway2/aksarkar/singlecell/reproduce-yang
    sbatch --partition=broadwl
    #!/bin/bash
    zcat YRI_SNPs_2_IPSC.txt.gen.gz | awk -vOFS='\t' 'BEGIN {print "##fileformat=VCFv4.2"; print "##FORMAT=<ID=DS,Number=1,Type=Float>"} NR == 1 {for (i = 10; i <= NF; i++) {$i = "NA"$i}} {print}' | bgzip >yri-dosages.vcf.gz
    tabix yri-dosages.vcf.gz
  #+END_SRC

  #+RESULTS:
  : Submitted batch job 44318523

  Run ~qtltools~

  #+CALL: qtltools(pheno="bulk", geno="/scratch/midway2/aksarkar/singlecell/reproduce-yang/yri-dosages.vcf.gz", op="--cov covars.txt  --window 100000 --permute 10000") :dir /scratch/midway2/aksarkar/singlecell/recall-bulk

  #+RESULTS:
  : Submitted batch job 44346795

  Read the output. *Important: this loses 201 genes (is this a bug in
  ~qtltools~)?*

  #+BEGIN_SRC ipython :noweb no-export
    <<read-qtltools-def>>
    bulk_qtls = read_qtltools_output('recall-bulk/bulk')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[129]:
  :END:

  Take QTLs with \(\mathrm{FDR} < 0.1\).

  #+BEGIN_SRC ipython :noweb no-export
    <<r-wrappers>>
    bulk_qtls['fdr_pass'] = bh(my_bulk_qtls['p_beta']) < .1
    bulk_qtls['fdr_pass'].sum()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[132]:
  : 1279
  :END:

  #+BEGIN_SRC ipython
    def qtltools_format(row):
      row['#Chr'] = '{}'.format(row['chr'][2:])
      row['gid'] = row.name
      row['pid'] = row.name
      return row

    def write_pheno_file(pheno, gene_info, output_file, holdout=True, **kwargs):
      if holdout:
        genes = gene_info.loc[gene_info['chr'].apply(lambda x: bool(int(x[2:]) % 2)).values]
      else:
        genes = gene_info
      (genes
       .apply(qtltools_format, **kwargs, axis=1)
       .merge(pheno, left_index=True, right_index=True)
       .to_csv(output_file,
               sep='\t',
               columns=['#Chr', 'start', 'end', 'pid', 'gid', 'strand'] + list(pheno.columns),
               header=True,
               index=False,
               index_label=False))
  #+END_SRC

  #+RESULTS: write-pheno-def
  :RESULTS:
  # Out[67]:
  :END:

  #+BEGIN_SRC ipython
    write_pheno_file(mean, gene_info, '/scratch/midway2/aksarkar/singlecell/mean.bed')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[71]:
  :END:

  Index the phenotype file.

  #+CALL: tabix(input="mean.bed")

  #+RESULTS:
  : Submitted batch job 44113019

  #+CALL: qtltools(pheno="mean", geno="/project2/gilad/singlecell-qtl/bulk/genotypes-qc.vcf.gz", op="--nominal 1")

  #+RESULTS:
  : Submitted batch job 44113021

  #+BEGIN_SRC sh :exports none
    sacct -j 44093227 -o Elapsed,ExitCode
  #+END_SRC

  #+RESULTS:
  |    Elapsed | ExitCode |
  | ---------- | -------- |
  |   06:30:26 |      0:0 |
  |   06:30:26 |      0:0 |

* Dispersion-QTL calling

  Read the estimated parameters and center them.

  #+BEGIN_SRC ipython
    disp = (pd.read_table('/scratch/midway2/aksarkar/singlecell/zi2-dispersion.txt.gz', sep=' ', index_col=0)
            .transform(lambda x: x - x.mean(), axis=1))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[133]:
  :END:

  #+BEGIN_SRC ipython
    write_pheno_file(disp, gene_info, '/scratch/midway2/aksarkar/singlecell/disp.bed')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[134]:
  :END:

  Index the phenotype file.

  #+CALL: tabix(input="disp.bed")

  #+RESULTS:
  : Submitted batch job 43380178

  Run ~qtltools~.

  #+CALL: qtltools(pheno="disp")

  #+RESULTS:
  : Submitted batch job 43380210

  Read the output.

  #+BEGIN_SRC ipython
    disp_qtls = read_qtltools_output('disp')
    keep_disp_qtls = bh(disp_qtls)
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[135]:
  : 98
  :END:

  #+BEGIN_SRC ipython :results output html
    print(disp_qtls[keep_disp_qtls].merge(gene_info, left_on='gene', right_index=True)[['gene', 'name', 'id', 'beta', 'p_beta']].reset_index(drop=True).to_html(classes=['table']))
  #+END_SRC

  #+RESULTS:
  #+BEGIN_EXPORT html
  <table border="1" class="dataframe table">
    <thead>
      <tr style="text-align: right;">
        <th></th>
        <th>gene</th>
        <th>name</th>
        <th>id</th>
        <th>beta</th>
        <th>p_beta</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <th>0</th>
        <td>ENSG00000165283</td>
        <td>STOML2</td>
        <td>rs151013351</td>
        <td>-3.309280</td>
        <td>0.000000e+00</td>
      </tr>
      <tr>
        <th>1</th>
        <td>ENSG00000170085</td>
        <td>SIMC1</td>
        <td>rs115194011</td>
        <td>-4.063380</td>
        <td>0.000000e+00</td>
      </tr>
      <tr>
        <th>2</th>
        <td>ENSG00000197724</td>
        <td>PHF2</td>
        <td>rs113363990</td>
        <td>-4.412720</td>
        <td>7.294860e-228</td>
      </tr>
      <tr>
        <th>3</th>
        <td>ENSG00000174405</td>
        <td>LIG4</td>
        <td>rs115154048</td>
        <td>-5.077620</td>
        <td>2.507990e-182</td>
      </tr>
      <tr>
        <th>4</th>
        <td>ENSG00000176697</td>
        <td>BDNF</td>
        <td>rs143827698</td>
        <td>-4.773690</td>
        <td>2.225750e-170</td>
      </tr>
      <tr>
        <th>5</th>
        <td>ENSG00000123810</td>
        <td>B9D2</td>
        <td>rs79026999</td>
        <td>-4.370730</td>
        <td>1.672330e-151</td>
      </tr>
      <tr>
        <th>6</th>
        <td>ENSG00000102743</td>
        <td>SLC25A15</td>
        <td>rs115773631</td>
        <td>-3.519380</td>
        <td>6.031130e-123</td>
      </tr>
      <tr>
        <th>7</th>
        <td>ENSG00000125449</td>
        <td>ARMC7</td>
        <td>rs75902792</td>
        <td>-4.630780</td>
        <td>6.994600e-88</td>
      </tr>
      <tr>
        <th>8</th>
        <td>ENSG00000143183</td>
        <td>TMCO1</td>
        <td>rs114697800</td>
        <td>-2.691680</td>
        <td>4.711220e-50</td>
      </tr>
      <tr>
        <th>9</th>
        <td>ENSG00000105865</td>
        <td>DUS4L</td>
        <td>rs187529047</td>
        <td>2.818420</td>
        <td>1.040130e-44</td>
      </tr>
      <tr>
        <th>10</th>
        <td>ENSG00000120314</td>
        <td>WDR55</td>
        <td>rs11167791</td>
        <td>3.441270</td>
        <td>2.458160e-42</td>
      </tr>
      <tr>
        <th>11</th>
        <td>ENSG00000164970</td>
        <td>FAM219A</td>
        <td>rs78437190</td>
        <td>-2.935010</td>
        <td>2.794990e-37</td>
      </tr>
      <tr>
        <th>12</th>
        <td>ENSG00000162909</td>
        <td>CAPN2</td>
        <td>rs2172360</td>
        <td>3.311410</td>
        <td>9.247940e-35</td>
      </tr>
      <tr>
        <th>13</th>
        <td>ENSG00000170860</td>
        <td>LSM3</td>
        <td>rs143962723</td>
        <td>-3.295380</td>
        <td>2.297400e-33</td>
      </tr>
      <tr>
        <th>14</th>
        <td>ENSG00000244165</td>
        <td>P2RY11</td>
        <td>rs76392887</td>
        <td>-3.159010</td>
        <td>1.709660e-32</td>
      </tr>
      <tr>
        <th>15</th>
        <td>ENSG00000116898</td>
        <td>MRPS15</td>
        <td>rs144661059</td>
        <td>-2.239470</td>
        <td>1.479050e-28</td>
      </tr>
      <tr>
        <th>16</th>
        <td>ENSG00000160049</td>
        <td>DFFA</td>
        <td>rs5007607</td>
        <td>-2.658710</td>
        <td>4.592440e-26</td>
      </tr>
      <tr>
        <th>17</th>
        <td>ENSG00000171608</td>
        <td>PIK3CD</td>
        <td>rs138247028</td>
        <td>-4.697440</td>
        <td>4.235250e-25</td>
      </tr>
      <tr>
        <th>18</th>
        <td>ENSG00000117143</td>
        <td>UAP1</td>
        <td>rs12067012</td>
        <td>1.433560</td>
        <td>3.856740e-23</td>
      </tr>
      <tr>
        <th>19</th>
        <td>ENSG00000205356</td>
        <td>TECPR1</td>
        <td>rs116757663</td>
        <td>-2.618370</td>
        <td>9.657750e-18</td>
      </tr>
      <tr>
        <th>20</th>
        <td>ENSG00000114859</td>
        <td>CLCN2</td>
        <td>rs116709730</td>
        <td>4.131380</td>
        <td>1.859410e-17</td>
      </tr>
      <tr>
        <th>21</th>
        <td>ENSG00000172830</td>
        <td>SSH3</td>
        <td>rs7105623</td>
        <td>-0.638843</td>
        <td>4.644960e-17</td>
      </tr>
      <tr>
        <th>22</th>
        <td>ENSG00000183020</td>
        <td>AP2A2</td>
        <td>rs186982458</td>
        <td>2.609980</td>
        <td>2.456720e-16</td>
      </tr>
      <tr>
        <th>23</th>
        <td>ENSG00000125734</td>
        <td>GPR108</td>
        <td>rs184583582</td>
        <td>-2.822690</td>
        <td>2.470850e-15</td>
      </tr>
      <tr>
        <th>24</th>
        <td>ENSG00000161682</td>
        <td>FAM171A2</td>
        <td>rs12944040</td>
        <td>2.363410</td>
        <td>3.075220e-15</td>
      </tr>
      <tr>
        <th>25</th>
        <td>ENSG00000179409</td>
        <td>GEMIN4</td>
        <td>rs2293067</td>
        <td>1.929650</td>
        <td>8.587390e-15</td>
      </tr>
      <tr>
        <th>26</th>
        <td>ENSG00000223802</td>
        <td>CERS1</td>
        <td>rs116562609</td>
        <td>-3.084010</td>
        <td>1.026820e-13</td>
      </tr>
      <tr>
        <th>27</th>
        <td>ENSG00000172273</td>
        <td>HINFP</td>
        <td>rs115425447</td>
        <td>1.686380</td>
        <td>1.513860e-13</td>
      </tr>
      <tr>
        <th>28</th>
        <td>ENSG00000205309</td>
        <td>NT5M</td>
        <td>rs8511</td>
        <td>-2.068040</td>
        <td>2.680890e-13</td>
      </tr>
      <tr>
        <th>29</th>
        <td>ENSG00000197043</td>
        <td>ANXA6</td>
        <td>rs139372973</td>
        <td>3.311060</td>
        <td>7.743520e-13</td>
      </tr>
      <tr>
        <th>30</th>
        <td>ENSG00000221829</td>
        <td>FANCG</td>
        <td>rs10972619</td>
        <td>1.169450</td>
        <td>1.578270e-12</td>
      </tr>
      <tr>
        <th>31</th>
        <td>ENSG00000142197</td>
        <td>DOPEY2</td>
        <td>rs77145506</td>
        <td>-4.209130</td>
        <td>2.389840e-12</td>
      </tr>
      <tr>
        <th>32</th>
        <td>ENSG00000160218</td>
        <td>TRAPPC10</td>
        <td>rs111257004</td>
        <td>1.450660</td>
        <td>2.654090e-12</td>
      </tr>
      <tr>
        <th>33</th>
        <td>ENSG00000133103</td>
        <td>COG6</td>
        <td>rs147106597</td>
        <td>1.708220</td>
        <td>4.361340e-12</td>
      </tr>
      <tr>
        <th>34</th>
        <td>ENSG00000158195</td>
        <td>WASF2</td>
        <td>rs11399</td>
        <td>-2.338620</td>
        <td>1.294060e-10</td>
      </tr>
      <tr>
        <th>35</th>
        <td>ENSG00000145041</td>
        <td>VPRBP</td>
        <td>rs115267057</td>
        <td>2.494370</td>
        <td>2.579560e-09</td>
      </tr>
      <tr>
        <th>36</th>
        <td>ENSG00000110321</td>
        <td>EIF4G2</td>
        <td>rs78742382</td>
        <td>-2.541230</td>
        <td>2.636980e-09</td>
      </tr>
      <tr>
        <th>37</th>
        <td>ENSG00000110200</td>
        <td>ANAPC15</td>
        <td>rs186789865</td>
        <td>-2.565120</td>
        <td>3.441620e-09</td>
      </tr>
      <tr>
        <th>38</th>
        <td>ENSG00000149196</td>
        <td>C11orf73</td>
        <td>rs1939103</td>
        <td>2.447090</td>
        <td>4.040330e-09</td>
      </tr>
      <tr>
        <th>39</th>
        <td>ENSG00000108828</td>
        <td>VAT1</td>
        <td>rs2355375</td>
        <td>-1.710740</td>
        <td>4.750800e-09</td>
      </tr>
      <tr>
        <th>40</th>
        <td>ENSG00000179862</td>
        <td>CITED4</td>
        <td>rs115694669</td>
        <td>-5.187470</td>
        <td>8.669450e-09</td>
      </tr>
      <tr>
        <th>41</th>
        <td>ENSG00000052841</td>
        <td>TTC17</td>
        <td>rs144392024</td>
        <td>-1.613270</td>
        <td>1.177680e-08</td>
      </tr>
      <tr>
        <th>42</th>
        <td>ENSG00000166012</td>
        <td>TAF1D</td>
        <td>rs116078422</td>
        <td>-2.003780</td>
        <td>1.928780e-08</td>
      </tr>
      <tr>
        <th>43</th>
        <td>ENSG00000130287</td>
        <td>NCAN</td>
        <td>rs116770984</td>
        <td>-4.604760</td>
        <td>4.709950e-08</td>
      </tr>
      <tr>
        <th>44</th>
        <td>ENSG00000116473</td>
        <td>RAP1A</td>
        <td>rs114787626</td>
        <td>1.540230</td>
        <td>5.546490e-08</td>
      </tr>
      <tr>
        <th>45</th>
        <td>ENSG00000136861</td>
        <td>CDK5RAP2</td>
        <td>rs115356711</td>
        <td>1.754840</td>
        <td>5.685210e-08</td>
      </tr>
      <tr>
        <th>46</th>
        <td>ENSG00000154640</td>
        <td>BTG3</td>
        <td>rs2823971</td>
        <td>2.413580</td>
        <td>1.038640e-07</td>
      </tr>
      <tr>
        <th>47</th>
        <td>ENSG00000126524</td>
        <td>SBDS</td>
        <td>rs118141535</td>
        <td>2.133510</td>
        <td>1.073340e-07</td>
      </tr>
      <tr>
        <th>48</th>
        <td>ENSG00000152942</td>
        <td>RAD17</td>
        <td>rs141370675</td>
        <td>0.927315</td>
        <td>1.714180e-07</td>
      </tr>
      <tr>
        <th>49</th>
        <td>ENSG00000172893</td>
        <td>DHCR7</td>
        <td>rs115998124</td>
        <td>-2.496930</td>
        <td>1.870360e-07</td>
      </tr>
      <tr>
        <th>50</th>
        <td>ENSG00000154380</td>
        <td>ENAH</td>
        <td>rs11584969</td>
        <td>-2.854720</td>
        <td>4.772460e-07</td>
      </tr>
      <tr>
        <th>51</th>
        <td>ENSG00000154511</td>
        <td>FAM69A</td>
        <td>rs146124737</td>
        <td>-4.834600</td>
        <td>6.027520e-07</td>
      </tr>
      <tr>
        <th>52</th>
        <td>ENSG00000131238</td>
        <td>PPT1</td>
        <td>rs12090353</td>
        <td>-1.503680</td>
        <td>9.294670e-07</td>
      </tr>
      <tr>
        <th>53</th>
        <td>ENSG00000188811</td>
        <td>NHLRC3</td>
        <td>rs143196152</td>
        <td>1.264350</td>
        <td>1.191190e-06</td>
      </tr>
      <tr>
        <th>54</th>
        <td>ENSG00000122435</td>
        <td>TRMT13</td>
        <td>rs139250635</td>
        <td>1.128600</td>
        <td>1.201480e-06</td>
      </tr>
      <tr>
        <th>55</th>
        <td>ENSG00000131469</td>
        <td>RPL27</td>
        <td>rs146750609</td>
        <td>1.649960</td>
        <td>1.505230e-06</td>
      </tr>
      <tr>
        <th>56</th>
        <td>ENSG00000161558</td>
        <td>TMEM143</td>
        <td>rs142646336</td>
        <td>-4.522090</td>
        <td>1.611620e-06</td>
      </tr>
      <tr>
        <th>57</th>
        <td>ENSG00000093167</td>
        <td>LRRFIP2</td>
        <td>rs77491290</td>
        <td>2.096840</td>
        <td>2.965970e-06</td>
      </tr>
      <tr>
        <th>58</th>
        <td>ENSG00000170946</td>
        <td>DNAJC24</td>
        <td>rs75350757</td>
        <td>2.622850</td>
        <td>4.225450e-06</td>
      </tr>
      <tr>
        <th>59</th>
        <td>ENSG00000149591</td>
        <td>TAGLN</td>
        <td>rs75419894</td>
        <td>-1.560600</td>
        <td>4.950990e-06</td>
      </tr>
      <tr>
        <th>60</th>
        <td>ENSG00000131236</td>
        <td>CAP1</td>
        <td>rs150600342</td>
        <td>-1.748100</td>
        <td>7.383560e-06</td>
      </tr>
      <tr>
        <th>61</th>
        <td>ENSG00000167766</td>
        <td>ZNF83</td>
        <td>rs141851483</td>
        <td>3.292110</td>
        <td>1.065440e-05</td>
      </tr>
      <tr>
        <th>62</th>
        <td>ENSG00000179163</td>
        <td>FUCA1</td>
        <td>rs79403581</td>
        <td>-2.898940</td>
        <td>1.160650e-05</td>
      </tr>
      <tr>
        <th>63</th>
        <td>ENSG00000254585</td>
        <td>MAGEL2</td>
        <td>rs12916127</td>
        <td>-2.993250</td>
        <td>1.536980e-05</td>
      </tr>
      <tr>
        <th>64</th>
        <td>ENSG00000166436</td>
        <td>TRIM66</td>
        <td>rs143365151</td>
        <td>-4.038500</td>
        <td>1.777680e-05</td>
      </tr>
      <tr>
        <th>65</th>
        <td>ENSG00000154814</td>
        <td>OXNAD1</td>
        <td>rs186345075</td>
        <td>3.438130</td>
        <td>1.895770e-05</td>
      </tr>
      <tr>
        <th>66</th>
        <td>ENSG00000172531</td>
        <td>PPP1CA</td>
        <td>rs4930435</td>
        <td>-2.254580</td>
        <td>2.211000e-05</td>
      </tr>
      <tr>
        <th>67</th>
        <td>ENSG00000011243</td>
        <td>AKAP8L</td>
        <td>rs74393806</td>
        <td>1.997810</td>
        <td>2.666640e-05</td>
      </tr>
      <tr>
        <th>68</th>
        <td>ENSG00000248098</td>
        <td>BCKDHA</td>
        <td>rs140346884</td>
        <td>-2.913330</td>
        <td>2.763770e-05</td>
      </tr>
      <tr>
        <th>69</th>
        <td>ENSG00000143198</td>
        <td>MGST3</td>
        <td>rs144467420</td>
        <td>-2.748340</td>
        <td>4.538870e-05</td>
      </tr>
      <tr>
        <th>70</th>
        <td>ENSG00000174574</td>
        <td>AKIRIN1</td>
        <td>rs143588389</td>
        <td>-2.988750</td>
        <td>6.604600e-05</td>
      </tr>
      <tr>
        <th>71</th>
        <td>ENSG00000103707</td>
        <td>MTFMT</td>
        <td>rs137966506</td>
        <td>3.245180</td>
        <td>6.846880e-05</td>
      </tr>
      <tr>
        <th>72</th>
        <td>ENSG00000145681</td>
        <td>HAPLN1</td>
        <td>rs114887660</td>
        <td>-3.971260</td>
        <td>7.128160e-05</td>
      </tr>
      <tr>
        <th>73</th>
        <td>ENSG00000184408</td>
        <td>KCND2</td>
        <td>rs143795479</td>
        <td>-4.538730</td>
        <td>8.513240e-05</td>
      </tr>
      <tr>
        <th>74</th>
        <td>ENSG00000137841</td>
        <td>PLCB2</td>
        <td>rs62019961</td>
        <td>-4.512630</td>
        <td>8.853740e-05</td>
      </tr>
      <tr>
        <th>75</th>
        <td>ENSG00000108557</td>
        <td>RAI1</td>
        <td>rs59212772</td>
        <td>-6.439100</td>
        <td>1.211490e-04</td>
      </tr>
      <tr>
        <th>76</th>
        <td>ENSG00000006016</td>
        <td>CRLF1</td>
        <td>rs10414298</td>
        <td>-1.853580</td>
        <td>1.396770e-04</td>
      </tr>
      <tr>
        <th>77</th>
        <td>ENSG00000109084</td>
        <td>TMEM97</td>
        <td>rs144069393</td>
        <td>-2.782690</td>
        <td>1.462980e-04</td>
      </tr>
      <tr>
        <th>78</th>
        <td>ENSG00000106086</td>
        <td>PLEKHA8</td>
        <td>rs118033320</td>
        <td>2.487410</td>
        <td>1.639470e-04</td>
      </tr>
      <tr>
        <th>79</th>
        <td>ENSG00000116906</td>
        <td>GNPAT</td>
        <td>rs10779810</td>
        <td>-1.170110</td>
        <td>1.677310e-04</td>
      </tr>
      <tr>
        <th>80</th>
        <td>ENSG00000064666</td>
        <td>CNN2</td>
        <td>rs184326775</td>
        <td>-1.410370</td>
        <td>1.764350e-04</td>
      </tr>
      <tr>
        <th>81</th>
        <td>ENSG00000149256</td>
        <td>TENM4</td>
        <td>rs189331375</td>
        <td>-4.245470</td>
        <td>1.807590e-04</td>
      </tr>
      <tr>
        <th>82</th>
        <td>ENSG00000117036</td>
        <td>ETV3</td>
        <td>rs188035981</td>
        <td>3.118750</td>
        <td>1.978480e-04</td>
      </tr>
      <tr>
        <th>83</th>
        <td>ENSG00000073050</td>
        <td>XRCC1</td>
        <td>rs138843872</td>
        <td>3.159450</td>
        <td>2.268670e-04</td>
      </tr>
      <tr>
        <th>84</th>
        <td>ENSG00000185453</td>
        <td>C19orf68</td>
        <td>rs138701164</td>
        <td>4.117920</td>
        <td>2.468340e-04</td>
      </tr>
      <tr>
        <th>85</th>
        <td>ENSG00000166452</td>
        <td>AKIP1</td>
        <td>rs141004297</td>
        <td>3.508760</td>
        <td>2.546470e-04</td>
      </tr>
      <tr>
        <th>86</th>
        <td>ENSG00000092978</td>
        <td>GPATCH2</td>
        <td>rs113462534</td>
        <td>4.085070</td>
        <td>2.997230e-04</td>
      </tr>
      <tr>
        <th>87</th>
        <td>ENSG00000131473</td>
        <td>ACLY</td>
        <td>rs111713404</td>
        <td>-2.099470</td>
        <td>3.098620e-04</td>
      </tr>
      <tr>
        <th>88</th>
        <td>ENSG00000160867</td>
        <td>FGFR4</td>
        <td>rs111567185</td>
        <td>2.796980</td>
        <td>3.604680e-04</td>
      </tr>
      <tr>
        <th>89</th>
        <td>ENSG00000186472</td>
        <td>PCLO</td>
        <td>rs78573728</td>
        <td>-4.342580</td>
        <td>3.955380e-04</td>
      </tr>
      <tr>
        <th>90</th>
        <td>ENSG00000132510</td>
        <td>KDM6B</td>
        <td>rs115083985</td>
        <td>-1.067740</td>
        <td>4.668840e-04</td>
      </tr>
      <tr>
        <th>91</th>
        <td>ENSG00000070669</td>
        <td>ASNS</td>
        <td>rs79183163</td>
        <td>-2.619050</td>
        <td>4.672200e-04</td>
      </tr>
      <tr>
        <th>92</th>
        <td>ENSG00000105671</td>
        <td>DDX49</td>
        <td>rs147349438</td>
        <td>1.518330</td>
        <td>5.734510e-04</td>
      </tr>
      <tr>
        <th>93</th>
        <td>ENSG00000165895</td>
        <td>ARHGAP42</td>
        <td>rs111702886</td>
        <td>-4.671170</td>
        <td>5.748990e-04</td>
      </tr>
      <tr>
        <th>94</th>
        <td>ENSG00000166333</td>
        <td>ILK</td>
        <td>rs77801446</td>
        <td>-2.310190</td>
        <td>7.091510e-04</td>
      </tr>
      <tr>
        <th>95</th>
        <td>ENSG00000148110</td>
        <td>HIATL1</td>
        <td>rs9409727</td>
        <td>-1.103750</td>
        <td>8.033820e-04</td>
      </tr>
      <tr>
        <th>96</th>
        <td>ENSG00000117906</td>
        <td>RCN2</td>
        <td>rs8026731</td>
        <td>-1.355620</td>
        <td>8.237700e-04</td>
      </tr>
      <tr>
        <th>97</th>
        <td>ENSG00000085276</td>
        <td>MECOM</td>
        <td>rs140988682</td>
        <td>-4.053850</td>
        <td>8.395570e-04</td>
      </tr>
    </tbody>
  </table>
  #+END_EXPORT

  Check the beta approximation to the permutation p-values:

  #+BEGIN_SRC ipython :ipyfile figure/qtl-mapping.org/zi2-disp-qtl-beta.png
    plt.clf()
    plt.scatter(disp_qtls['p_empirical'], disp_qtls['p_beta'], s=1, c='k')
    plt.plot([0, 1], [0, 1], c='r', ls='--')
    plt.xlabel('Empirical p-value')
    plt.ylabel('Approximate p-value')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[137]:
  : Text(0,0.5,'Approximate p-value')
  [[file:figure/qtl-mapping.org/zi2-disp-qtl-beta.png]]
  :END:

  Plot the quantile-quantile plot of QTL test statistics:

  #+BEGIN_SRC ipython :ipyfile figure/qtl-mapping.org/zi2-disp-qtl-qq.png
    qqplot(disp_qtls['p_beta'])
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[138]:
  [[file:figure/qtl-mapping.org/zi2-disp-qtl-qq.png]]
  :END:
