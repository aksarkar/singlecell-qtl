#+TITLE: QTL mapping pipeline
#+SETUPFILE: setup.org

* Introduction

  Here, we set up the infrastructure to call mean and variance QTLs, assuming
  that we have [[file:zinb.org][previously estimated means and variances per individual, per
  gene.]]

* Setup                                                            :noexport:

  #+BEGIN_SRC emacs-lisp
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(memory="4G", venv="scqtl") :dir /scratch/midway2/aksarkar/singlecell

  #+RESULTS:
  : Submitted batch job 42222683

  #+BEGIN_SRC ipython
    import functools
    import os.path
    import numpy as np
    import pandas as pd
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[102]:
  :END:

* Genotype processing
  
  ~QTLtools~ reports 0 variants in cis for an unexpected number of genes, so
  figure out what's going on.

  #+BEGIN_SRC sh :dir /project2/gilad/singlecell-qtl/bulk
    sbatch --partition=broadwl --job-name process-geno
    #!/bin/bash
    source activate scqtl
    zcat /project/compbio/jointLCLs/genotype/hg19/YRI/vcf/chr{?,??}.hg19.vcf.gz | awk 'BEGIN {print "##fileformat=VCFv4.1"} NR > 1 && ! /CHROM/ {print}' | bgzip >genotypes.vcf.gz
    tabix genotypes.vcf.gz
  #+END_SRC

  #+RESULTS:
  : Submitted batch job 42223533

* Mean-QTL calling

  Write out the [[https://qtltools.github.io/qtltools/pages/input_files.html][phenotype file]] for ~QTLtools~.

  #+NAME: get-gene-info
  #+BEGIN_SRC ipython
    gene_info = (pd.read_table('/home/aksarkar/projects/singlecell-qtl/data/scqtl-genes.txt.gz')
                 .set_index('gene')
                 .query('source == "H. sapiens"')
                 .query('chr != "hsX"')
                 .query('chr != "hsY"')
                 .query('chr != "hsMT"'))
    gene_info.head()
  #+END_SRC

  #+RESULTS: get-gene-info
  :RESULTS:
  # Out[103]:
  #+BEGIN_EXAMPLE
    chr      start        end      name strand      source
    gene
    ENSG00000000419  hs20   49551404   49575092      DPM1      -  H. sapiens
    ENSG00000000457   hs1  169818772  169863408     SCYL3      -  H. sapiens
    ENSG00000000460   hs1  169631245  169823221  C1orf112      +  H. sapiens
    ENSG00000000938   hs1   27938575   27961788       FGR      -  H. sapiens
    ENSG00000000971   hs1  196621008  196716634       CFH      +  H. sapiens
  #+END_EXAMPLE
  :END:

  #+NAME: write-pheno-def
  #+BEGIN_SRC ipython
    def qtltools_format(row):
      row['#Chr'] = 'chr{}'.format(row['chr'][2:])
      row['gid'] = row.name
      row['pid'] = row.name
      return row

    def write_pheno_file(pheno, gene_info, output_file):
      (gene_info
       .apply(qtltools_format, axis=1)
       .merge(pheno, left_index=True, right_index=True)
       .to_csv(output_file,
               sep='\t',
               columns=['#Chr', 'start', 'end', 'pid', 'gid', 'strand'] + list(pheno.columns),
               header=True,
               index=False,
               index_label=False)
      )
  #+END_SRC

  #+RESULTS: write-pheno-def
  :RESULTS:
  # Out[104]:
  :END:

  Read the estimated parameters. These might be missing due to failure to
  converge in the inference algorithm. As a first pass, mean-impute them by
  centering the data (ignoring missing values), and then filling in missing
  values with 0.

  #+BEGIN_SRC ipython
    mean = (pd.read_table('/scratch/midway2/aksarkar/singlecell/mean.txt.gz', sep=' ', index_col=0)
            .rename(columns=lambda x: x[2:] if x.startswith('NA') else x)
            .transform(lambda x: x - x.mean(), axis=1)
            .fillna(0))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[123]:
  :END:

  #+BEGIN_SRC ipython
    write_pheno_file(mean, gene_info, '/scratch/midway2/aksarkar/singlecell/mean.bed')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[124]:
  :END:

  Index the phenotype file.

  #+NAME: tabix
  #+BEGIN_SRC sh :var input="mean.bed" :var partition="broadwl" :dir /scratch/midway2/aksarkar/singlecell :eval never-export
    export input=$input
    sbatch --partition=$partition --wait
    #!/bin/bash
    sort -k1,1 -k2,2n -k3,3n $input | bgzip >$input.gz
    tabix -p bed $input.gz
  #+END_SRC

  #+RESULTS: tabix
  : Submitted batch job 42222761

  Run the QTL mapping.

  #+NAME: qtltools
  #+BEGIN_SRC sh :var pheno="mean" :var partition="broadwl" :dir /scratch/midway2/aksarkar/singlecell :eval never-export 
    export pheno=$pheno
    sbatch --partition=$partition -N1 -c4 -J $pheno-qtl -o $pheno-qtl.log --wait
    #!/bin/bash
    source activate scqtl
    module load parallel
    parallel -j4 qtltools cis --vcf /project2/gilad/singlecell-qtl/bulk/genotypes.vcf.gz --bed $pheno.bed.gz --nominal=0.01 --chunk {#} 100 --out $pheno-qtl.{#}.txt ::: $(seq 1 100)
  #+END_SRC

  #+RESULTS: qtltools
  : Submitted batch job 42222762

  Read the results.

  #+BEGIN_SRC ipython
    file_names = ['mean-qtl.{}.txt'.format(i) for i in range(1, 101)]
    mean_qtls = (pd.concat([pd.read_table(f, header=None, sep=' ') for f in file_names if os.path.exists(f) and os.path.getsize(f) > 0])
                 .rename(columns={i: x for i, x in enumerate(['gene', 'chr', 'start', 'end', 'strand', 'num_vars', 'distance', 'id', 'var_chr', 'var_start', 'var_end', 'p', 'beta', 'top'])})
                 .sort_values('p'))
    mean_qtls[mean_qtls['top'] == 1].head()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[125]:
  #+BEGIN_EXAMPLE
    gene    chr   start     end strand  num_vars  distance id  \
    34   ENSG00000112685   chr6  485134  693117      -      4707    485134  A
    13   ENSG00000188157   chr1  955504  991496      +      4434   -955504  C
    33   ENSG00000177764  chr20  277738  280965      +      4497   -277738  T
    340  ENSG00000198858  chr19  896504  913240      -      6636    896504  C
    185  ENSG00000177370  chr17  900358  906911      +      7031   -900358  T

    var_chr  var_start  var_end         p      beta  top
    34     chr6     889168        0  0.000003  0.315941    1
    13     chr1     891060        0  0.000015 -0.399166    1
    33    chr20     880670        0  0.000016  0.173546    1
    340   chr19    1328429        0  0.000021  0.124546    1
    185   chr17    1031449        0  0.000025  0.115441    1
  #+END_EXAMPLE
  :END:

  *TODO:* Permutation testing within QTLtools? lfsr estimation by ~ashr~?

* Dispersion-QTL calling

  Read the estimated parameters and mean-impute missing values.

  #+BEGIN_SRC ipython
    disp = (pd.read_table('/scratch/midway2/aksarkar/singlecell/dispersion.txt.gz', sep=' ', index_col=0)
            .rename(columns=lambda x: x[2:] if x.startswith('NA') else x)
            .transform(lambda x: x - x.mean(), axis=1)
            .fillna(0))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[131]:
  :END:

  #+BEGIN_SRC ipython
    write_pheno_file(disp, gene_info, '/scratch/midway2/aksarkar/singlecell/disp.bed')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[132]:
  :END:

  Index the phenotype file

  #+CALL: tabix(input="disp.bed")

  #+RESULTS:
  : Submitted batch job 42222964

  Run ~qtltools~

  #+CALL: qtltools(pheno="disp")

  #+RESULTS:
  : Submitted batch job 42222965

  #+BEGIN_SRC ipython
    file_names = ['disp-qtl.{}.txt'.format(i) for i in range(1, 101)]
    disp_qtls = (pd.concat([pd.read_table(f, header=None, sep=' ') for f in file_names if os.path.exists(f) and os.path.getsize(f) > 0])
                 .rename(columns={i: x for i, x in enumerate(['gene', 'chr', 'start', 'end', 'strand', 'num_vars', 'distance', 'id', 'var_chr', 'var_start', 'var_end', 'p', 'beta', 'top'])})
                 .sort_values('p')
                 .set_index('gene'))
    disp_qtls[disp_qtls['top'] == 1].head()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[129]:
  #+BEGIN_EXAMPLE
    chr   start     end strand  num_vars  distance id var_chr  \
    gene
    ENSG00000073614  chr12  389296  498620      -      4063    389296  A   chr12
    ENSG00000167693  chr17  702554  883010      -      6962    702554  C   chr17
    ENSG00000176105  chr18  721589  812547      -      6273    721589  G   chr18
    ENSG00000176890  chr18  657605  673578      +      5732   -657605  G   chr18
    ENSG00000070423  chr19  647527  663277      -      5822    647527  G   chr19

    var_start  var_end             p     beta  top
    gene
    ENSG00000073614     970299        0  3.467880e-11 -2.82639    1
    ENSG00000167693     201119        0  1.397440e-10 -2.93679    1
    ENSG00000176105    1556146        0  5.343630e-10 -3.22117    1
    ENSG00000176890    1556146        0  4.212020e-09 -3.14846    1
    ENSG00000070423     738794        0  1.216950e-07 -1.13901    1
  #+END_EXAMPLE
  :END:

  #+BEGIN_SRC ipython
    disp_qtls.shape[0]
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[26]:
  : 9720
  :END:
* Next steps
   
  1. We previously used half-sibling regression ([[https://www.pnas.org/cgi/doi/10.1073/pnas.1511656113][Scholkopf et al 2016]]) to correct
     confounders for bulk RNA-Seq in GTEx ([[http://dx.doi.org/10.1101/107623][Park et al 2017]]).

     The key idea is that the only ways we could predict the expression of a
     gene of interest using genes on other chromosomes are (1) true
     /trans/-regulation and (2) shared confounding. For /cis/-QTL mapping, we
     want to eliminate both of these, which we can do by simply regressing out
     gene expression of all genes on all other chromosomes.

     One open question is whether we should correct counts (which would be
     required to solve issue (3)), or correct per-individual means/variances.

  2. We previously built an [[https://github.com/YPARK/fqtl][inference engine which supports negative binomial
     models]] which could be easily extended to zero-inflated negative binomial
     models.

     In our experiments directly using the negative binomial likelihood
     outperformed the Gaussian model (following the ~voom~-transform, but
     sharing the mean model parameters in the dispersion model).

     This would allow us to solve issues (2) and (3), and potentially make (4)
     easier.
