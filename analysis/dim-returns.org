#+TITLE: Diminishing returns of sequencing depth
#+SETUPFILE: setup.org

* Introduction

  [[https://jdblischak.github.io/singleCellSeq/analysis/subsample-lcl-final.html][We previously observed]] that the number of genes/molecules detected does not
  saturate with increasing sequencing depth.

  Here, we quantify the potential gain in additional sequencing of the samples
  in terms of number of molecules and number of genes detected.

* Setup                                                            :noexport:

  #+BEGIN_SRC emacs-lisp
    (org-babel-lob-ingest "/home/aksarkar/projects/singlecell-qtl/analysis/dim-reduction.org")
    (org-babel-lob-ingest "/home/aksarkar/.emacs.d/org-templates/library.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(memory="16G",venv="scqtl") :dir /scratch/midway2/aksarkar/singlecell

  #+RESULTS:
  : Submitted batch job 43620934

  #+BEGIN_SRC ipython
    import colorcet
    import numpy as np
    import pandas as pd
    import matplotlib.pyplot as plt
    import sklearn.linear_model as lm
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[1]:
  :END:

* Analysis

  #+CALL: read-data-qc()

  #+RESULTS:
  :RESULTS:
  # Out[3]:
  :END:

  #+BEGIN_SRC ipython
    annotations.shape
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[4]:
  : (5012, 40)
  :END:

  #+BEGIN_SRC ipython :ipyfile figure/dim-returns.org/mol-vs-depth.png
    plt.clf()
    plt.scatter(annotations['umi'], annotations['mol_hs'], color='k', s=2)
    plt.xticks(np.linspace(0, 1, 5) * 1e7, np.linspace(0, 1, 5) * 10)
    plt.xlabel('Millions of reads with UMI')
    _ = plt.ylabel('Number of molecules detected')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[6]:
  [[file:figure/dim-returns.org/mol-vs-depth.png]]
  :END:

  #+BEGIN_SRC ipython :ipyfile figure/dim-returns.org/detect-vs-depth.png
    plt.clf()
    plt.scatter(annotations['umi'], annotations['detect_hs'], color='k', s=2)
    plt.xticks(np.linspace(0, 1, 5) * 1e7, np.linspace(0, 1, 5) * 10)
    plt.xlabel('Millions of reads with UMI')
    _ = plt.ylabel('Number of genes detected')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[7]:
  [[file:figure/dim-returns.org/detect-vs-depth.png]]
  :END:

  To see whether the trend is different per individual, fit a linear regression
  per individual:

  #+BEGIN_SRC ipython :async t
    def _lm(x):
      m = lm.LinearRegression(fit_intercept=True).fit(x['umi'].values.reshape(-1, 1), x['mol_hs'].values)
      rss = np.square(x['mol_hs'].values - m.predict(x['umi'].values.reshape(-1, 1))).sum()
      sigma2 = rss / x.shape[0]
      var = x['umi'].var()
      se = sigma2 / var
      return pd.Series({'beta': m.coef_[0], 'se': se, 'intercept': m.intercept_})

    beta = annotations.groupby('chip_id').apply(_lm).sort_index()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[35]:
  :END:

  Plot the distribution of regression coefficients:

  #+BEGIN_SRC ipython :ipyfile figure/dim-returns.org/mol-vs-depth-beta.png
    plt.clf()
    plt.hist(beta['beta'].values, color='k', bins=20)
    plt.xlabel('Estimated number of molecules detected per additional read')
    _ = plt.ylabel('Number of individuals')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[15]:
  [[file:figure/dim-returns.org/mol-vs-depth-beta.png]]
  :END:

  #+BEGIN_SRC ipython :ipyfile figure/dim-returns.org/mol-vs-depth-beta-errors.png
    plt.clf()
    plt.gcf().set_size_inches(12, 4)
    plt.errorbar(x=np.arange(beta.shape[0]), y=beta['beta'].values, yerr=beta['se'].values, ls='', marker='o', ms=1)
    plt.xticks(np.arange(beta.shape[0]), beta.index, rotation=90)
    plt.xlabel('Individual')
    _ = plt.ylabel('Estimated effect size')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[41]:
  [[file:figure/dim-returns.org/mol-vs-depth-beta-errors.png]]
  :END:
