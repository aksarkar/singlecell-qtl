#+TITLE: Power to detect QTLs in single cell data
#+SETUPFILE: setup.org

* Introduction

  Our goal here is estimate power to detect mean and variance-effect QTLs. The
  strategy is to resample the single cell RNA-Seq data to generate datasets
  with equal patterns of dropout, overdispersion, mean-variance
  dependence, etc.

* Setup                                                            :noexport:

  #+BEGIN_SRC emacs-lisp
    (org-babel-lob-ingest "/project2/mstephens/aksarkar/projects/singlecell-qtl/analysis/sc-vs-bulk.org")
  #+END_SRC

  #+RESULTS:
  : 1

  #+CALL: ipython3(memory="16G", venv="scqtl")

  #+RESULTS:
  : Submitted batch job 44915330

  #+NAME: imports
  #+BEGIN_SRC ipython
    %matplotlib inline

    import collections
    import colorcet
    import gzip
    import io
    import matplotlib.cm
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    import requests
    import scipy.stats as sst
  #+END_SRC

  #+RESULTS: imports
  :RESULTS:
  :END:

  #+CALL: concordance-def()

  #+RESULTS:
  :RESULTS:
  # Out[158]:
  :END:

* Read and QC the single cell counts

  #+BEGIN_SRC ipython
    annotations = pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/scqtl-annotation.txt')
    keep_samples = pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/quality-single-cells.txt', index_col=0, header=None)
    keep_genes = pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/genes-pass-filter.txt', index_col=0, header=None)
    annotations = annotations.loc[keep_samples.values.ravel()]
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  # Out[4]:
  :END:

  #+BEGIN_SRC ipython
    umi = pd.read_table('/project2/mstephens/aksarkar/projects/singlecell-qtl/data/scqtl-counts.txt.gz', index_col=0)
    umi = umi.loc[keep_genes.values.ravel(),keep_samples.values.ravel()]
  #+END_SRC

* Resample scRNA-Seq

  Assuming the true single cells all came from one individual, generate new
  single cells by sampling counts for each gene iid. with replacement. This
  method assumes genes are independent, which is justified only if we perform
  analysis one gene at a time.

  To generate a new data set (with multiple individuals), randomly sample
  individuals with replacement, and generate a new set of single cells for each
  sampled individual.

  #+NAME: simulate
  #+BEGIN_SRC ipython
    def sample_cells(umi, n=1):
      """Return a sampled matrix of UMI counts

      Assume the input matrix is UMI for a single individal. Sample gene counts
      i.i.d. from the empirical distribution of counts

      """
      result = np.zeros((umi.shape[0], n))
      for i, row in enumerate(umi.values):
        result[i] = np.random.choice(row, size=n, replace=True)
      return pd.DataFrame(result, index=umi.index)

    def sample_individuals(umi, annotations, num_individuals=None, num_cells=100):
      """Return a sampled matrix of UMI counts for multiple individuals

      num_individuals - # individuals to sample (default: equal number)
      num_cells - # cells to sample for each sampled individual

      Returns:

      umi - matrix of counts
      individuals - list of resampled IDs

      """
      if num_individuals is None:
        num_individuals = len(lookup)
      individuals = list(np.random.choice(annotations['chip_id'].unique(), size=num_individuals, replace=True))
      result = pd.DataFrame(index=umi.index)
      for k in individuals:
        result = result.merge(
          sample_cells(umi.loc[:,(annotations['chip_id'] == k).values], n=num_cells),
          left_index=True,
          right_index=True)
      return result, individuals
  #+END_SRC

  #+RESULTS: simulate
  :RESULTS:
  :END:

* Plot concordance between simulated and real data

  #+CALL: concordance-def()

  #+RESULTS:
  :RESULTS:
  :END:

  #+BEGIN_SRC ipython :results none
    pools = [cpm(sample_cells(umi.loc[:,(annotations['chip_id'] == 'NA18507').values], n=100).agg(np.sum, axis=1), log2=True).to_frame()
             for _ in range(2)]

    plot_concordance(
      x=pools[0],
      xlabel='Simulated single cell $\log_2(CPM + 1)$',
      y=bulk['NA18507'].to_frame(),
      ylabel='Bulk $\log_2(TPM + 1)$',
      title='NA18507',
      filename='/project2/mstephens/aksarkar/projects/singlecell-qtl/analysis/figure/power.org/sim/sc-vs-bulk.png')
    plot_concordance(
      x=pools[0],
      xlabel='Simulated single cell $\log_2(CPM + 1)$',
      y=pools[1],
      ylabel='Simulated single cell $\log_2(CPM + 1)$',
      title='NA18507',
      filename='/project2/mstephens/aksarkar/projects/singlecell-qtl/analysis/figure/power.org/sim/sc-vs-sc.png',
      gridsize=15)
  #+END_SRC

  The true concordance, [[file:sc-vs-bulk.org::*Plot%20bulk%20vs.%20pooled%20single%20cells][as previously computed]]:

  file:figure/sc-vs-bulk.org/normed/NA18507.png
  file:figure/sc-vs-bulk.org/subsets/NA18507-100.png

  Generated single cell. vs bulk and single cell vs. single cell concordance:

  file:figure/power.org/sim/sc-vs-bulk.png
  file:figure/power.org/sim/sc-vs-sc.png

* Simulate at a bulk RNA-Seq QTL

  Consider the gene /ZWIM7/, for which the strongest mean eQTL is
  ~rs73276049~. We previously plotted the distribution of UMI counts stratified
  by genotype:

  file:figure/sc-stratified-geno.org/214941.png

  Get the genotype for each individual:

  #+BEGIN_SRC ipython
    def extract_genotypes(f, rsid):
      head = next(f).split()
      for line in f:
        record = line.split()
        if record[2] == rsid:
          return {'NA{}'.format(k): int(np.round(float(v))) for k, v in zip(head, record) if k[0] == '1'}
      return dict()
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  :END:

  #+BEGIN_SRC ipython
    with gzip.open('/project/compbio/jointLCLs/genotype/hg19/YRI/genotypesYRI.gen.txt.gz', 'rt') as f:
      lookup = extract_genotypes(f, 'rs73276049')
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  :END:

  Simulate new cohorts varying the sample size, stratify on genotype, and plot:

  1. the distribution of simulated UMI counts
  2. the mean UMI count

  #+BEGIN_SRC ipython :results none
    colors = {k: matplotlib.cm.get_cmap('Set1').colors[k] for k in range(-1, 3)}
    for n in [20, 40, 60, 80]:
      sampled_umi, individuals = sample_individuals(umi, annotations, num_individuals=n)
      plt.clf()
      # We need to handle missing genotypes because NA19092 isn't in the genotype
      # matrix
      for k, g in sampled_umi.loc['ENSG00000214941'].groupby([lookup.get(k, -1) for k in individuals for _ in range(100)]):
        if k >= 0:
          plt.hist(g, histtype='step', bins=np.arange(g.max()).astype(np.float32), color=colors[k])
          plt.axvline(x=g.mean(), color=colors[k], label=int(k))
      plt.title('ZWIM7, {} individuals, 100 cells'.format(n))
      plt.ylabel('Number of cells')
      plt.xlabel('UMI count')
      plt.gca().legend()
      plt.savefig('/project2/mstephens/aksarkar/projects/singlecell-qtl/analysis/figure/power.org/sim/ZWIM7-{}.png'.format(n))
  #+END_SRC

  file:figure/power.org/sim/ZWIM7-20.png
  file:figure/power.org/sim/ZWIM7-40.png
  file:figure/power.org/sim/ZWIM7-60.png
  file:figure/power.org/sim/ZWIM7-80.png

* Open problems

  1. If we estimate the effect size distribution from real data, and use the
     estimated effect sizes to perform the power calculation, we need to
     account for winner's curse
  2. Confounder correction on the UMI counts
  3. Confounder correction on the genotypes

